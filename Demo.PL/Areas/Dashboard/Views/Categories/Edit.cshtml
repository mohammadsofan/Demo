@model EditCategoryViewModel
@{
    ViewData["Title"] = "Categories - Edit";
    ViewData["HeaderTitle"] = "EditCategory";
    ViewData["Controller"] = "Categories";

}
<div class="col-md-6">
    <div class="card card-primary">
        <div class="card-header">
            <h3 class="card-title">Edit Category</h3>
        </div>
        <form asp-area="Dashboard" asp-controller="Categories" asp-action="Edit" enctype="multipart/form-data">
            <div class="card-body">
                <input asp-for="Id" type="hidden"/>
                <input asp-for="CreatedAt" type="hidden"/>
                <partial name="_EditCategoryForm" />
            </div>
            <div class="card-footer">
                <div asp-validation-summary="ModelOnly" class="text-danger"></div>
                <button type="submit" class="btn btn-primary btn-sm"><i class="fas fa-edit"></i> Edit</button>
                <a asp-controller="Categories" asp-action="Index" class="btn btn-danger btn-sm">Cancel</a>
            </div>
        </form>
    </div>

</div>

@section Scripts {
    <partial name="_ValidationScriptsPartial" />
    <partial name="_FileInputScripts" />
    <script>
        const imageInput = document.getElementById("NewImage");
        const imagePreview = document.getElementById(`imageContainer`);

        imageInput.addEventListener("change", (event) => {
            const files = event.target.files;

            // Clear previous previews
            imagePreview.innerHTML = "";


            Array.from(files).forEach((file) => {
                if (!file.type.startsWith("image/")) {
                    alert(`${file.name} is not an image file!`);
                    event.target.value = "";
                    imagePreview.innerHTML = `<img class="formImage m-2 rounded" src="/files/images/@Model.Image" />`;
                    return;
                }

                // Validate file size (example: max 2MB)
                const maxSizeInMB = 2;
                if (file.size > maxSizeInMB * 1024 * 1024) {
                    alert(`${file.name} exceeds the ${maxSizeInMB}MB size limit.`);
                    event.target.value = "";
                    imagePreview.innerHTML = `<img class="formImage m-2 rounded" src="/files/images/@Model.Image" />`;
                    return;
                }

                // Create an image preview
                const reader = new FileReader();
                reader.onload = (e) => {
                    const img = document.createElement("img");
                    img.className = "formImage m-2 rounded";
                    img.src = e.target.result;
                    img.alt = file.name;

                    imagePreview.appendChild(img);
                };
                reader.readAsDataURL(file);
            });
        });

    </script>
}
@section Styles {


}